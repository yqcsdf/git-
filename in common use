创建并切换到分支：git checkout -b your-dev；

编程完成后 git add . 保存到暂存区；

之后使用git commit -m '本次提交的备注' 将代码提交；

合并某分支到当前分支：git merge your-dev；(先切换到主分支)；

合并完成后可以执行删除自己的分支：git branch -D your-dev (大写D为强制删除)；

删除后查看分支目录：git branch；

git commit --amend  补充后续提交 （会进入vm编辑器，此时输入:wq保存退出）；

git push -f origin 强制上传；

解决冲突方法：
	   git checkout develop(就是master)切换到主分支,先git pull代码 ，之后切换到自己的分支 git checkout your-dev；
	   在自己的分支下，输入 git rebase develop 进行冲突检查，提示冲突后手动修改，提交到缓存区；
	   修改完成后在自己分支下输入 git rebase --continue；进行提交,不需输入commit；
	   最后再次 git push -f origin 上传；
     这样在gitlab的MR提交目录下只会存在一个commit，便于同事之间查看与后续修改维护代码；
     
     这只是个人常用的一些指令，对于整体的流程也许不够详细规范，后续会慢慢补充
